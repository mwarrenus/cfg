#   -*- shell-script -*-
[ $DEBUG ] && echo "in functions"

cygwin=false
darwin=false
hpux=false
linux=false
mingw=false
os400=false
case "`uname -s`" in
CYGWIN*) cygwin=true;;
Darwin*) darwin=true;;
HP-UX*) hpux=true;;
Linux*) linux=true;;
MINGW*) mingw=true;;
OS400*) os400=true;;
esac

### https://superuser.com/questions/39751/
#mw Skip the directory existence check during setup phase; some directories are getting created
#    if [ -d "$ARG" ] && [[ ":$PATH:" != *":$ARG:"* ]]; then
pathappend() {
  for ARG in "$@"; do
    if [ -d "$ARG" ] && [[ ":$PATH:" != *":$ARG:"* ]]; then
        PATH="${PATH:+"$PATH:"}$ARG"
    fi
  done
}

# Add $@ args to beginning of $PATH
pathprepend() {
  for ((i=$#; i>0; i--)); do
    ARG="${!i}"
    if [ -d "$ARG" ] && [[ ":$PATH:" != *":$ARG:"* ]]; then
        PATH="$ARG${PATH:+":$PATH"}"
    fi
  done
}

# simple extension of https://stackoverflow.com/questions/370047
# Delete $@ args from $PATH
pathdelete() {
    local IFS=':'
    t=($PATH)
    n=${#t[*]}
    a=()
    for ARG in "$@"; do
	for ((i=0;i<n;i++)); do
	    p="${t[i]%%*"$ARG"*}"
	    [ "${p}" ] && a[i]="${p}"
	done
    done

    PATH="${a[*]}"
}

pathdedupe() {
    if [ -n "$PATH" ]; then
	local old_PATH="$PATH:"
	PATH=
	while [ -n "$old_PATH" ]; do
	    x="${old_PATH%%:*}"		# the first remaining entry
	    case $PATH: in
		*:"$x":*) ;;		# already there
		*) PATH="$PATH:$x";;	# not there yet
	    esac
	    old_PATH="${old_PATH#*:}"
	done
	PATH="${PATH#:}" # get rid of leading colon
    fi
}
		

parse_git_branch() {
    git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/'
}

# from https://thrysoee.dk/pushd/
cd() {
   local i MAX LEN p

   MAX=10
   LEN=${#DIRSTACK[@]}

   if [ $# -eq 0 ] || [ "$1" = "-" ]; then
      builtin cd "$@" || return 1
      pushd -n $OLDPWD > /dev/null
   else
      pushd "$@" > /dev/null || return 1
   fi

   if [ $LEN -gt 1 ]; then
      for ((i=1; i <= LEN ; i++)); do
         eval p=~$i
         if [ "$p" = "$PWD" ]; then
            popd -n +$i > /dev/null
            break
         fi
      done
   fi

   if [ $LEN -ge $MAX ]; then
      popd -n -0 > /dev/null
   fi
}


# Calculate what the \w bash PS1 escape will print
pwd_string() {
    local dbg=0;
    # substitute tilde for $HOME if it's there
    p=${PWD/#$HOME/\~}
    [ $dbg -gt 0 ] && echo "p=$p . PWD=$PWD"
    local IFS='/'
    t=($p)
    n=${#t[*]}
    [ $dbg -gt 0 ] && echo "dbg=$dbg: found n=$n parts in $p . Split it into ${t[@]}"
    unset IFS
    if [[ n -gt $PROMPT_DIRTRIM ]]; then
	[ $dbg -gt 0 ] && echo "fixin stuff"
	# put tilde back if needed. Element 0 is nil when path starts with /
	p="${t[0]:+${t[0]}/}..."
	for ((i=n-$PROMPT_DIRTRIM;i<n;i++)); do
	    p+="/${t[i]}"
	done
	[ $dbg -gt 0 ] && echo "rebuilt is ${#p} chars long: $p"
    fi
    echo ${p}
}

# Find length of \w component (using for right side prompt)
pwd_len() {
    p=$(pwd_string)
    echo ${#p}
}

# pwd_len(){
#     if [[ "$PWD" =~ "${HOME}" ]]; then
# 	echo $(expr ${#PWD} - ${#HOME} + 1);
#     else
# 	echo ${#PWD}
#     fi
# }

function iterm2_print_user_vars() {
  iterm2_set_user_var gitBranch $(parse_git_branch)
}

	
	


